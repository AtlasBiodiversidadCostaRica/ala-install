/* Creates the cassandra 0.7.x schema necessary for biocache-store 
   Run this file using:
   ./cassandra-cli --host localhost --batch < create_cass_schema.txt
*/

/* all keyspaces are created using the ByteOrderPreservingPartitioner see the cassandra.yaml file */
CREATE KEYSPACE occ_test WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 3 };

use occ_test;

CREATE TABLE occ_test_dynamic (
  key varchar PRIMARY KEY,
  term varchar,
  value varchar
);


CREATE TABLE occ_test_fixed ( key varchar PRIMARY KEY, 
  occurrenceID varchar,
  accessrights varchar,
  associatedMedia varchar,
  associatedOccurrences varchar,
  associatedReferences varchar,
  associatedSequences varchar,
  associatedTaxa varchar,
  basisOfRecord varchar,
  behavior varchar,
  bibliographicCitation varchar,
  catalogNumber varchar,
  collectionCode varchar,
  collectionID varchar,
  dataGeneralizations varchar,
  datasetID varchar,
  datasetName varchar,
  disposition varchar,
  dynamicProperties varchar,
  establishmentMeans varchar,
  fieldNotes varchar,
  fieldNumber varchar,
  identifier varchar,
  individualCount varchar,
  individualID varchar,
  informationWithheld varchar,
  institutionCode varchar,
  institutionID varchar,
  language varchar,
  license varchar,
  lifeStage varchar,
  modified varchar,
  occurrenceAttributes varchar,
  occurrenceDetails varchar,
  occurrenceRemarks varchar,
  occurrenceStatus varchar,
  otherCatalogNumbers varchar,
  ownerInstitutionCode varchar,
  preparations varchar,
  previousIdentifications varchar,
  recordedBy varchar,
  recordNumber varchar,
  relatedResourceID varchar,
  relationshipAccordingTo varchar,
  relationshipEstablishedDate varchar,
  relationshipOfResource varchar,
  relationshipRemarks varchar,
  reproductiveCondition varchar,
  resourceID varchar,
  resourceRelationshipID varchar,
  rights varchar,
  rightsholder varchar,
  samplingProtocol varchar,
  samplingEffort varchar,
  sex varchar,
  source varchar,
  userId varchar, 
  collectorFieldNumber varchar,  
  cultivated varchar, 
  duplicates varchar, 
  duplicatesOriginalInstitutionID varchar, 
  duplicatesOriginalUnitID varchar, 
  loanIdentifier varchar, 
  loanSequenceNumber varchar,  
  loanDestination varchar, 
  loanForBotanist varchar, 
  loanDate varchar, 
  loanReturnDate varchar, 
  phenology varchar,  
  preferredFlag varchar,
  secondaryCollectors varchar, 
  naturalOccurrence varchar, 
  validDistribution varchar,
  images varchar,
  sounds varchar,
  videos varchar,
  interactions varchar,
  duplicationStatus varchar, 
  duplicationType varchar, 
  countryConservation varchar,
  stateConservation varchar,
  globalConservation varchar,
  originalSensitiveValues varchar,
  outlierForLayers varchar,
  photographer varchar, 
  day varchar,
  endDayOfYear varchar,
  eventAttributes varchar,
  eventDate varchar,
  eventDateEnd varchar,
  eventID varchar,
  eventRemarks varchar,
  eventTime varchar,
  verbatimEventDate varchar,
  year varchar,
  month varchar,
  startDayOfYear varchar,
  startYear varchar,
  endYear varchar,
  scientificName varchar,
  scientificNameAuthorship varchar,
  scientificNameID varchar,
  taxonConceptID varchar,
  taxonID varchar,
  kingdom varchar,
  phylum varchar,
  classs varchar,
  bioOrder varchar,
  superfamily varchar,  
  family varchar,
  subfamily varchar, 
  genus varchar,
  subgenus varchar,
  species varchar,
  specificEpithet varchar,
  subspecies varchar,
  infraspecificEpithet varchar,
  infraspecificMarker varchar,
  cultivarName varchar, 
  higherClassification varchar,
  parentNameUsage varchar,
  parentNameUsageID varchar,
  acceptedNameUsage varchar,
  acceptedNameUsageID varchar,
  originalNameUsage varchar,
  originalNameUsageID varchar,
  taxonRank varchar,
  taxonomicStatus varchar,
  taxonRemarks varchar,
  verbatimTaxonRank varchar,
  vernacularName varchar,
  nameAccordingTo varchar,
  nameAccordingToID varchar,
  namePublishedIn varchar,
  namePublishedInYear varchar,
  namePublishedInID varchar,
  nomenclaturalCode varchar,
  nomenclaturalStatus varchar,
  scientificNameWithoutAuthor varchar,
  scientificNameAddendum varchar, 
  taxonRankID varchar,
  kingdomID varchar,
  phylumID varchar,
  classID varchar,
  orderID varchar,
  familyID varchar,
  genusID varchar,
  subgenusID varchar,
  speciesID varchar,
  subspeciesID varchar,
  left varchar,
  right varchar,
  speciesHabitats varchar,
  speciesGroups varchar, 
  nameMatchMetric varchar, 
  taxonomicIssue varchar, 
  nameParseType varchar, 
  dataProviderUid varchar,
  dataProviderName varchar,
  dataResourceUid varchar,
  dataResourceName varchar,
  collectionUid varchar,,
  institutionUid varchar,
  dataHubUid varchar,
  dataHubName varchar,
  institutionName varchar,
  collectionName varchar,
  citation varchar,
  provenance varchar,
  measurementAccuracy varchar,
  measurementDeterminedBy varchar,
  measurementDeterminedDate varchar,
  measurementID varchar,
  measurementMethod varchar,
  measurementRemarks varchar,
  measurementType varchar,
  measurementUnit varchar,
  measurementValue varchar,
  continent varchar,
  coordinatePrecision varchar,
  coordinateUncertaintyInMeters varchar,
  country varchar,
  countryCode varchar,
  county varchar,
  decimalLatitude varchar,
  decimalLongitude varchar,
  footprintSpatialFit varchar,
  footprintWKT varchar,
  footprintSRS varchar,
  geodeticDatum varchar,
  georeferencedBy varchar,
  georeferencedDate varchar,
  georeferenceProtocol varchar,
  georeferenceRemarks varchar,
  georeferenceSources varchar,
  georeferenceVerificationStatus varchar,
  habitat varchar,
  biome varchar,
  higherGeography varchar,
  higherGeographyID varchar,
  island varchar,
  islandGroup varchar,
  locality varchar,
  locationAccordingTo varchar,
  locationAttributes varchar,
  locationID varchar,
  locationRemarks varchar,
  maximumDepthInMeters varchar,
  maximumDistanceAboveSurfaceInMeters varchar,
  maximumElevationInMeters varchar,
  minimumDepthInMeters varchar,
  minimumDistanceAboveSurfaceInMeters varchar,
  minimumElevationInMeters varchar,
  municipality varchar,
  pointRadiusSpatialFit varchar,
  stateProvince varchar,
  verbatimCoordinates varchar,
  verbatimCoordinateSystem varchar,
  verbatimDepth varchar,
  verbatimElevation varchar,
  verbatimLatitude varchar,
  verbatimLocality varchar,
  verbatimLongitude varchar,
  verbatimSRS varchar,
  waterBody varchar,
  lga varchar,
  generalisedLocality varchar,
  nearNamedPlaceRelationTo varchar,
  australianHerbariumRegion varchar,
  distanceOutsideExpertRange varchar,
  easting varchar,
  northing varchar,
  zone varchar,
  gridReference varchar,
  bbox varchar
);


create column family occ with comparator=UTF8Type and default_validation_class=UTF8Type
and comment='The column family for occurrence records' 
and key_validation_class = 'UTF8Type' 
and compaction_strategy=LeveledCompactionStrategy
and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
and column_metadata=[{column_name: portalId, validation_class: UTF8Type, index_type: KEYS},
{column_name: uuid, validation_class: UTF8Type, index_type: KEYS}];

create column family loc with comparator=UTF8Type 
and default_validation_class=UTF8Type 
and key_validation_class = 'UTF8Type' 
and comment ='The column family for locations'
and compaction_strategy=LeveledCompactionStrategy
and compaction_strategy_options = {'sstable_size_in_mb' : '200'};

create column family attr with comparator=UTF8Type 
and default_validation_class=UTF8Type 
and key_validation_class = 'UTF8Type'
and comment='The column family for attribution tracking' 
and compaction_strategy=LeveledCompactionStrategy;

create column family taxon with comparator=UTF8Type 
and default_validation_class=UTF8Type 
and key_validation_class = 'UTF8Type'
and comment='The column family for taxon profile information' 
and compaction_strategy=LeveledCompactionStrategy
and compaction_strategy_options = {'sstable_size_in_mb' : '200'};

/* update column family loc with comparator=UTF8Type and keys_cached=1.0 */

create column family qa with comparator=UTF8Type 
and default_validation_class=UTF8Type 
and key_validation_class = 'UTF8Type'
and comment='The column family for quality assertions'
and column_metadata=[{column_name: userId, validation_class: UTF8Type,  index_type: KEYS},
{column_name:code, validation_class: UTF8Type, index_type: KEYS}] 
and compaction_strategy=LeveledCompactionStrategy
and compaction_strategy_options = {'sstable_size_in_mb' : '200'};

create column family dellog  
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'  
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to log deleted information';

create column family duplicates  
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'  
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to store information about duplicates';

create column family occ_duplicates  
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'  
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to store information about duplicates';

create column family upload
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to store information about dynamically uploaded datasets';

create column family outliers with comparator = 'UTF8Type' and default_validation_class = 'UTF8Type'
and comment='The column family for occurrence records' and gc_grace=2000;

create column family occ_outliers with comparator = 'UTF8Type' and default_validation_class = 'UTF8Type'
and comment='The column family for occurrence records' and gc_grace=2000;

update column family outliers with comparator = 'UTF8Type' and default_validation_class = 'UTF8Type'
and column_metadata=[{column_name: portalId, validation_class: UTF8Type, index_type: KEYS},
{column_name: uuid, validation_class: UTF8Type, index_type: KEYS}];

update column family occ_outliers with comparator = 'UTF8Type' and default_validation_class = 'UTF8Type'
and column_metadata=[{column_name: portalId, validation_class: UTF8Type, index_type: KEYS},
{column_name: uuid, validation_class: UTF8Type, index_type: KEYS}];


create column family queryassert  
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'  
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to store information about query based assertions';

update column family queryassert with column_metadata=[{column_name: uuid, validation_class: UTF8Type, index_type: KEYS}];

create column family distribution_outliers
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to store information about expert distribution outlier records';
  
create column family qid
  with comparator = 'UTF8Type'
  and default_validation_class = 'UTF8Type'
  and key_validation_class = 'UTF8Type'
  and compaction_strategy = 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy'
  and compaction_strategy_options = {'sstable_size_in_mb' : '200'}
  and comment = 'The column family to store information about stored query requests (qid)';
