server.name=http://{{cas_hostname}}
server.prefix=${server.name}/cas
# IP address or CIDR subnet allowed to access the /status URI of CAS that exposes health check information
cas.securityContext.status.allowedSubnet=127.0.0.1


cas.themeResolver.defaultThemeName=cas-theme-default
cas.viewResolver.basename=default_views

##
# Unique CAS node name
# host.name is used to generate unique Service Ticket IDs and SAMLArtifacts.  This is usually set to the specific
# hostname of the machine running the CAS node, but it could be any label so long as it is unique in the cluster.
host.name={{cas_hostname}}

##
# Database flavors for Hibernate
#
# One of these is needed if you are storing Services or Tickets in an RDBMS via JPA.
#
# database.hibernate.dialect=org.hibernate.dialect.OracleDialect
# database.hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
# database.hibernate.dialect=org.hibernate.dialect.HSQLDialect

##
# CAS Logout Behavior
# WEB-INF/cas-servlet.xml
#
# Specify whether CAS should redirect to the specified service parameter on /logout requests
cas.logout.followServiceRedirects=true

##
# Single Sign-On Session Timeouts
# Defaults sourced from WEB-INF/spring-configuration/ticketExpirationPolices.xml
#
# Maximum session timeout - TGT will expire in maxTimeToLiveInSeconds regardless of usage
# tgt.maxTimeToLiveInSeconds=28800
#
# Idle session timeout -  TGT will expire sooner than maxTimeToLiveInSeconds if no further requests
# for STs occur within timeToKillInSeconds
# tgt.timeToKillInSeconds=7200

##
# Service Ticket Timeout
# Default sourced from WEB-INF/spring-configuration/ticketExpirationPolices.xml
#
# Service Ticket timeout - typically kept short as a control against replay attacks, default is 10s.  You'll want to
# increase this timeout if you are manually testing service ticket creation/validation via tamperdata or similar tools
# st.timeToKillInSeconds=10

##
# Single Logout Out Callbacks
# Default sourced from WEB-INF/spring-configuration/argumentExtractorsConfiguration.xml
#
# To turn off all back channel SLO requests set slo.disabled to true
# slo.callbacks.disabled=false

##
# Service Registry Periodic Reloading Scheduler
# Default sourced from WEB-INF/spring-configuration/applicationContext.xml
#
# Force a startup delay of 2 minutes.
# service.registry.quartz.reloader.startDelay=120000
#
# Reload services every 2 minutes
# service.registry.quartz.reloader.repeatInterval=120000

##
# Log4j
# Default sourced from WEB-INF/spring-configuration/log4jConfiguration.xml:
#
# It is often time helpful to externalize log4j.xml to a system path to preserve settings between upgrades.
log4j.config.location={{log4j_config_location}}

# log4j.config.location=classpath:log4j.xml
#
# log4j refresh interval in millis
# log4j.refresh.interval=60000

##
# Password Policy
#
# Warn all users of expiration date regardless of warningDays value.
password.policy.warnAll=false

# Threshold number of days to begin displaying password expiration warnings.
password.policy.warningDays=30

# URL to which the user will be redirected to change the passsword.
password.policy.url=https://password.example.edu/change

cas.host={{cas_hostname}}

cas.securityContext.serviceProperties.service=http://${cas.host}/cas/services/j_acegi_cas_security_check
cas.securityContext.serviceProperties.adminRoles=ROLE_ADMIN
cas.securityContext.casProcessingFilterEntryPoint.loginUrl=http://${cas.host}/cas/login
cas.securityContext.ticketValidator.casServerUrlPrefix=http://${cas.host}/cas

host.name={{cas_hostname}}

database.hibernate.dialect=org.hibernate.dialect.MySQLDialect

userStore.db.host={{user_store_db_hostname}}
userStore.db.driverClassName=com.mysql.jdbc.Driver
userStore.db.url=jdbc\:mysql\://${userStore.db.host}/{{user_store_db_name}}
userStore.db.username={{user_store_db_username}}
userStore.db.password={{user_store_db_password}}
userStore.db.idleConnectionTestPeriod=3600
userStore.db.automaticTestTable=c3p0TestTable

userStore.password.encoding.algorithm={{user_store_db_encoding_algorithm}}
userStore.password.encoding.base64=true
userStore.password.encoding.salt={{user_store_db_encoding_salt}}
userStore.password.sql.query=select password from passwords p, users u where u.username = ? and p.userid = u.userid and p.status='CURRENT'
userStore.attribute.sql.query=call sp_get_user_attributes(?)

ticketRegistry.db.driverClassName=com.mysql.jdbc.Driver
ticketRegistry.db.url=jdbc\:mysql\://{{ticket_registry_db_hostname}}/{{ticket_registry_db_name}}
ticketRegistry.db.username={{ticket_registry_db_username}}
ticketRegistry.db.password={{ticket_registry_db_password}}

userdetails.url={{userdetails_url}}
userStore.create.sql.query=call sp_create_user(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

userdetails.url={{userdetails_url}}

rememberMeDuration=1209600

pac4j.callback.url={{pac4j_callback_url}}

#facebook
pac4j.facebook.consumer.key={{pac4j_facebook_consumer_key}}
pac4j.facebook.consumer.secret={{pac4j_facebook_consumer_secret}}

# twitter
pac4j.twitter.consumer.key={{pac4j_twitter_consumer_key}}
pac4j.twitter.consumer.secret={{pac4j_twitter_consumer_secret}}

# github
pac4j.github.consumer.key={{pac4j_github_consumer_key}}
pac4j.github.consumer.secret={{pac4j_github_consumer_secret}}

# google
pac4j.google.consumer.key={{pac4j_google_consumer_key}}
pac4j.google.consumer.secret={{pac4j_google_consumer_secret}}

# linkedin
pac4j.linkedin.consumer.key={{pac4j_linkedin_consumer_key}}
pac4j.linkedin.consumer.secret={{pac4j_linkedin_consumer_secret}}

# windows live
pac4j.windows.consumer.key={{pac4j_windows_consumer_key}}
pac4j.windows.consumer.secret={{pac4j_windows_consumer_secret}}

# yahoo OAuth and OpenID
pac4j.yahoo.consumer.key={{pac4j_yahoo_consumer_key}}
pac4j.yahoo.consumer.secret={{pac4j_yahoo_consumer_secret}}

# automatic registration ALA user password
user.create.password={{user_create_password}}

# NOTE: ala-cas-2.0 at the moment does *NOT* use ala-header-and-tails JSP tag lib to generate
#       the header/footer in top.jsp and bottom.jsp respectively (because of some compatibility
#       issues between bs2/bs3/wordpress.
#       The "header" HTML is for now "hardcoded" in top.jsp, these properties are used to set the
#       diff menu, search, and link URLs.
#       Once ala-header-and-tails is fixed we won't need this section anymore.

# top bar (top.jsp)
ala.base.url={{ala_base_url}}
ala.contactus.url={{ala_contactus_url}}
ala.getinvolved.url={{ala_getinvolved_url}}
ala.search.url={{ala_search_url}}

# ALA Apps menu (top.jsp)
spatial.base.url={{spatial_base_url}}
biocache.base.url={{biocache_base_url}}
fish.base.url={{fish_base_url}}
regions.base.url={{regions_base_url}}
biocache.explore.url={{biocache_explore_url}}
sightings.base.url={{sightings_base_url}}
collections.base.url={{collections_base_url}}
volunteer.base.url={{volunteer_base_url}}
fieldcapture.merit.url={{fieldcapture_merit_url}}
soils2satelite.base.url={{soils2satelite_base_url}}
lists.base.url={{lists_base_url}}
phylolink.base.url={{phylolink_base_url}}
community.base.url={{community_base_url}}
dashboard.base.url={{dashboard_base_url}}
collections.dataset.url={{collections_dataset_url}}

# footer (bottom.jsp)
ala.aboutcs.url={{ala_aboutcs_url}}
ala.about.url={{ala_about_url}}
sandbox.base.url={{sandbox_base_url}}
api.base.url={{api_base_url}}
ala.mobileapps.url={{ala_mobileapps_url}}
biocache.base.url={{biocache_base_url}}
ala.sensitivedata.url={{ala_sensitivedata_url}}
ala.dataintegration.url={{ala_dataintegration_url}}
ala.datasetupload.url={{ala_datasetupload_url}}
ala.communications.url={{ala_communications_url}}
ala.educational.url={{ala_educational_url}}
ala.faq.url={{ala_faq_url}}
ala.systemstatus.url={{ala_systemstatus_url}}
ala.termsofuse.url={{ala_termsofuse_url}}
